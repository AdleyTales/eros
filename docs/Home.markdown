### 介绍
eros 是基于 [weex](https://weex-project.io/cn/) 封装面向前端的 vue 写法的解决方案。

eros 的定位不是组件库（后续当然会拓展），由于 app 开发的特殊性，他则更偏重关心于整个 app 项目，**他的优势在于我们对 weex 官方的二次封装，能及时跟进 weex 的新特性，并通过脚手架支持更新 module，widget， appboard 等机制，让熟悉 Vue 的同学都能更少的关注Weex版本升级和本身的兼容性问题，快速进行业务迭代** ，也让前端和客户端能通过 weex 底层机制来进行交互。

当然，在您的 PC 上运行 eros，是非常简单的，当您下载好周边所有的工具和库的时候，只需几行命令，进行一些初始化配置，便可以进行开发，脚手架也提供指令来更新 eros 基础库，而您无需关心 weex 的版本，因为已经内嵌到基础库中。

### 为什么会有 eros ？


weex 开发痛点：

* weex 在初始化时，启动环境会遇到种种问题；

* weex 项目工程化没有很好的解决方案；

* weex 的业务写法前端接受程度不高，编译环境需要二次配置；

* weex 版本升级之后，当前应用扩展设计不足导致很难升级 SDK；

* 随着业务的发展需要对 weex 的 modules 和 components 进行扩展，前端同学的原生扩展能力有限，官方更新不够快；

* 没有配套的增量升级的方案；

* 没有成套的 UI 组件进行简易 APP 快速开发；


### 我们能解决

* 通过脚手架，初始化出完整的项目工程目录；

* 一键启动服务进行实时开发效果查看和 debug 调试，vue、sass、stylus、less、babel等编译都支持（安卓端目前debug调试有问题，我们在抓紧修复）；

* 实时跟进最新的 SDK，一键命令升级现有工程，使工程实时跟进官方 weex 版本；

* 快速响应大家的需求，增加扩展 components 和 modules，简易的调用方式，灵活的扩展业务；

* 完整的差分包更新方案，快速发布上线业务及更新；

* bui 和 weex-ui 的内嵌集成和更新；

### 工作原理

![工作原理](https://gitee.com/uploads/images/2017/1026/154734_0a730bcf_1595985.png "原理.png")

### 前期准备

在开发之前可能需要学习并使用以下框架，而 eros 是基于他们来进行开发的。

* [weex](http://weex-project.io/cn/)
* [**vue**](https://cn.vuejs.org/index.html)


### 支持性

只支持纯 weex 的 Vue 多页面应用开发，正在逐步实现对已有工程的集成方案。（多页面在 weex 使用中性能会更好，页面间切换的动画可以是原生动画）

目前只支持 iOS 和 Android 的开发，暂不支持 web 。目前 Mac 版 和 Windows 下都能进行开发，但是推荐使用 Mac 开发，window 会遇到很多 node-sass 的环境问题（w eb 和 native 的交互及用户习惯会有差别，两者所承载的侧重点也会有差别，所以一套开发多套使用并没有让多端更精细化，web 更多是降级方案，但是目前 eros 有内置包和完备的远程更新方案，所以需要降级的场景基本不会出现）

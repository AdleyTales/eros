### 内置打包
___

#### 为什么要打内置包？

我们把当前所有页面的`js bundle`都内嵌到客户端中，这时候就可以把app给他人使用

当然，你的`js bundle`不可能常年不改，每次`js bundle`变化，不可能一次又一次来装你的`app`，这时候就需要一套[发布更新的逻辑](/fa-bu-geng-xin.md)。

以`ios`为例，如果需要用户强制升级的版本，送审的时候就可以带着最新版本的内置包去，用户下载到的自然你最新的版本，然后从这个版本起，每个不涉及`app`底层变动的小版本通过一套增量发布逻辑就可以更改你的`js bundle`，也就实现了不用送审，便自动更改了你页面的内容。

#### 什么情况下需要打内置包？

1. **根目录的**`config.json`**变动的时候**，因为`config.json`还包含着一些业务逻辑，就比如请求地址，如果换了另一个地址，是需要把变动通知到`app`端的，也就是把`config.json`传入`app`对应的一个文件夹内，覆盖之前的`config.json`。
2. 你在`js`中写的一个业务功能已经开发完成，这时候也可以打一个内置包去测试。

#### 如何打内置包？

打内置包，只需要在**fe目录下执行一行指令：**

```
$ bm eros pack
```

以`ios`打内置包为例：

![](https://img.benmu-health.com/gitbook/pack.gif)

1. 我们会构建你所有暴露出来的js（dev.json中配置的exports的js），然后生成一个内置zip包，和包的一些相关信息`page.config`。
2. 脚手架会把项目根目录的`config.json`，`page.config`，`内置zip包`传入默认在`config.json`中配置的`zipFolder.iOS`相对路径，如果您不更改存放地址，就不需要修改`config.json`中的路径。

至此，内置打包过程已经结束，下面看看我们如可来进行业务开发。


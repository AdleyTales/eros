### CNPM 淘宝源

---

为了保证你的安装速度，请必须下载淘宝源，如果已经下载请忽略。
我们生成模板时候执行的是cnpm，所以请务必下载，及时是您的 npm 已经关联了淘宝源。

```
$ npm i -g cnpm --registry=https://registry.npm.taobao.org
```

### 脚手架 \| 首次安装

---

#### mac/linux环境下

如果您本地没有安装本木脚手架，请先安装，如果您本地已经安装过了，也请及时更新到脚手架最新版本，命令行中全局执行：

```
$ cnpm i BMFE_scaffold -g
```

#### windows环境下

**经过使用 Windows 的同学反馈，我们强烈建议使用 Windows 的同学装个虚拟机跑 mac 环境，会省去很多环境的问题，如果你就是喜欢Windows，那也没问题，按照以下方式做即可，期间可能会遇到一些问题，请直接在群里反馈；**

请确认有一下必要环境，如果没有请自行安装：

* **GIT BASH （一般安装 git for windows 就会有）**
* **Python 2**
* **.NET Framework 2.0 SDK 或以上 （Window 10 安装4.0及以上）**
* **Microsoft Visual Studio 2005 或以上**

> .NET Framework、 Microsoft Visual Studio 可以在这个网站下载 [MSDN](https://msdn.itellyou.cn/)

##### 正式安装：

先尝试安装 `node-sass`

```
$ cnpm i -g node-sass
```

然后安装脚手架 `BMFE_scaffold`

```
$ cnpm i -g BMFE_scaffold
```

如果脚手架安装成功切没有报任何错误，请直接命令行运行 bm，如果弹出功能列表标识已经安装成功，忽略一下步骤。

注意重要的步骤来了！  
![输入图片说明](https://gitee.com/uploads/images/2017/1026/155314_f7463366_1595985.png "WechatIMG21.png")

**这里应该会报node-sass下载失败，我们直接无视，安装完成之后，将全局 node\_modules（不知道的路径请看下面注解） 中 BMFE\_scaffold/node\_module/node-sass 文件夹替换成全局 node\_modules/node-sass \(也就是把你之前全局下好的 node-sass 文件夹拷贝进去，所有都覆盖\)。**

> 注：npm 全局安装路径默认是 **C:\Users\Administrator\AppData\Roaming\npm\node\_modules**，如果您已经修改此路径，请已修正路径为准，如果依然不知道，报错信息中也会有当前 npm 包的全局路径，找到关键字 BMFE scaffold 就能看到。

正常情况下，到这一步在命令行中输入 bm  已经可以正常运行，但依然会有部分可以被称为**天选之子**的同学的电脑会出现如下报错： 
![输入图片说明](https://gitee.com/uploads/images/2017/1026/155349_d29ab551_1595985.png "坑2.png")
**这个也很好解决，我们进入全局 node\_modules 下的 BMFE\_scaffold/node\_modules/ 下，找到 \_node-sass@3.13.1@node-sass 然后把它删掉就可以了。**

最后如果这步之后还是报错，麻烦请联系我们，我们目前没有遇到过，请您谅解。

**常见报错：**

error-1：

`[d:\Dev\node.js\test\hello\node_modules\socket.io\node_modules\socket. o-c lient\node_modules\ws\build\binding.sln] MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”。`

要解决此问题：

* 安装 **.NET Fram ework 2.0 SDK**；
* 安装  **Microsoft Visual Studio 2005**；

如果将该组件安装到了其他位置，**请将其位置添加到系统路径**。

error-2：

`[d:\Dev\node.js\test\hello\node_modules\socket.io\node_modules\socket. o-c lient\node_modules\ws\build\binding.sln] socket.io@0.9.13 node_modules\socket.io`

这个需要一些时间，这个问题很常见，网上可以搜到其他解决办法：

```js
npm install --global --production windows-build-tools
```

### 脚手架 \| 更新

---

* `$ sudo cnpm i BMFE_scaffold -g`
* 脚手架直接安装失败的 windows 环境同学，脚手架的node-sass 按照替换一下（首次安装已经下载过了node-sass）

### iOS 开发环境

---

1.在 `AppStore` 中搜索 `Xcode` 并下载。

2.安装 CocoaPods：

* 升级 Ruby 环境：`$ sudo gem update --system`
* 移除现有 Ruby 镜像：`$ gem sources --remove https://rubygems.org/`
* 添加ruby-china镜像：`$ gem source -a https://gems.ruby-china.org/`
* 安装 CocoaPods：`$ sudo gem install cocoapods`

  如果以上命令报错则执行：`$ sudo gem install -n /usr/local/bin cocoapods --pre`

* 最后执行：`$ pod setup` 过程比较漫长，请耐心等待执行完成

### ANDROID 开发环境

---

* 下载并安装 [JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)。
* 下载并安装 [Android Studio](https://developer.android.google.cn/studio/index.html)。

### 调试

---

安装 weex-toolkit：

`npm i -g weex-toolkit`

> [weex-toolkit](https://github.com/weexteam/weex-toolkit) 是官方提供的一个脚手架命令行工具，你可以使用它进行 Weex 项目的创建，调试以及打包等功能，我们这里只使用它的调试功能；

Windows 推荐下载 `fidder`，Mac/linux推荐下载 `Charles` ，并破解 。（[下载和破解地址](http://charles.iiilab.com/)），然后开启 `Charles`。

> 正向代理工具，为我们提供了真机调试，能让我们在app 中访问电脑本地的 js bundle。

至此，所有的相关的工具和软件都已下载完毕，下面我们开始创建一个`weex-eros-demo`工程。

